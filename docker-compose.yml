services:
  db:
    image: postgres:16-alpine
    container_name: pos_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-pos}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pospass}
      POSTGRES_DB: ${POSTGRES_DB:-posdb}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 3s
      retries: 20
    ports:
      - "5432:5432"

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: pos_api
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://${POSTGRES_USER:-pos}:${POSTGRES_PASSWORD:-pospass}@db:5432/${POSTGRES_DB:-posdb}?schema=public
      JWT_SECRET: ${JWT_SECRET:-change_me}
    ports:
      - "4000:4000"

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://api:4000}
    container_name: pos_web
    depends_on:
      - api
    environment:
      NODE_ENV: production
      PORT: 3000
      # Point Next.js frontend to the API internal DNS name via Dokploy network or Compose network
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://api:4000}
    ports:
      - "3000:3000"

volumes:
  db_data:
